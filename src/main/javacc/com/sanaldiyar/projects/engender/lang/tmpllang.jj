options {
    STATIC = false;
}

PARSER_BEGIN(TMPLParser)

package com.sanaldiyar.projects.engender.lang;

import java.io.StringReader;
import java.util.ArrayList;

public class TMPLParser {

    public static Command parse(String data) throws ParseException{
        TMPLParser parser=new TMPLParser(new StringReader(data));
        return parser.COMMANDS();
    }

}
PARSER_END(TMPLParser)

SKIP:
{
      " "
    | "\t"
    | "\n"
    | "\r"
}

TOKEN:
{
      <PRINT:      "=" >
    | <IF:          "if" >
    | <FOREACH:     "foreach" >
    | <LPARAN:      "(" >
    | <RPARAN:      ")" >
    | <CLPARAN:     "{" >
    | <CRPARAN:     "}" >
    | <DOT:         "." >
    | <EQUALS:      "==">
    | <NOTEQUALS:   "!=">
    | <BIG:         ">" >
    | <LESS:        "<" >
    | <BIGNEQ:      ">=" >
    | <LESSNEQ:     "<=" >
    | <AND:         "and" >
    | <OR:          "or" >
    | <NOT:         "!" >
    | <LONG:        "L" >
    | <FDELIM:      ":" >
}

TOKEN: 
{ 
      < DIGIT:      (["0"-"9"]) > 
}

TOKEN: 
{ 
      < LETTER:     (["a"-"z","A"-"Z"]) > 
}

TOKEN: 
{ 
      < VARNAME:    <LETTER> (<LETTER>|<DIGIT>|"_")* > 
}

CommandList COMMANDS():
{
    CommandList cl=new CommandList();
    ArrayList<Command> commands=new ArrayList<Command>();
    Command command;
}
{
    ( command = COMMAND() { commands.add(command); } )+
    { cl.setCommands(commands); return cl; }
}

Command COMMAND():
{
    Command command;
}
{
    ( <PRINT> command = PRINTVARIABLECOMMAND() | <PRINT> command = CONSTANTCOMMAND() | <IF> command = IFCOMMAND() | <FOREACH> command = FOREACHCOMMAND() )
    { return command; }
}

PrintVariableCommand PRINTVARIABLECOMMAND():
{
    PrintVariableCommand printVariableCommand=new PrintVariableCommand();
    Token variablename;
    String vid;
}
{
    "$" variablename = <VARNAME> { vid = variablename.image; } ( <DOT> variablename = <VARNAME> { vid += "." +  variablename.image;} )*
    { printVariableCommand.setVariableName(vid); return printVariableCommand; }
}

IfCommand IFCOMMAND():
{
    IfCommand ifCommand=new IfCommand();
    BooleanExpressionCommand booleanExpressionCommand;
    ArrayList<Command> innerCommands=new ArrayList<Command>();
    Command innerCommand;
}
{
    <LPARAN> booleanExpressionCommand = BOOLEANEXPRESSIONCOMMAND() <RPARAN> <CLPARAN> (innerCommand = COMMAND() { innerCommands.add(innerCommand); } )* <CRPARAN>
    { ifCommand.setBooleanExpression(booleanExpressionCommand); ifCommand.setInnerCommands(innerCommands); return ifCommand; }
}

BooleanExpressionCommand BOOLEANEXPRESSIONCOMMAND():
{
    BooleanExpressionCommand booleanExpressionCommand=new BooleanExpressionCommand();
    BooleanOperation bop;
    BooleanMerger bm;
    Command left,right;
    BooleanExpressionCommand nc=null;
}
{
    <LPARAN> ( left = PRINTVARIABLECOMMAND() | left = CONSTANTCOMMAND() ) bop = COMPARISON() ( right = PRINTVARIABLECOMMAND() | right = CONSTANTCOMMAND() ) <RPARAN>
            ( bm = MERGER()  nc=BOOLEANEXPRESSIONCOMMAND() { booleanExpressionCommand.setBooleanMerger(bm); booleanExpressionCommand.setNextCommand(nc); } )?
    { booleanExpressionCommand.setLeft(left); booleanExpressionCommand.setBooleanOperation(bop);  booleanExpressionCommand.setRight(right); return booleanExpressionCommand;}
}

BooleanMerger MERGER():
{
    BooleanMerger bm;
}
{
    ( <AND> {bm=BooleanMerger.AND;} | <OR> {bm=BooleanMerger.OR;} ) { return bm; }
}

BooleanOperation COMPARISON():
{
    BooleanOperation bop;
}
{
     (<EQUALS> { bop=BooleanOperation.EQUALS; }| <NOTEQUALS> { bop=BooleanOperation.NOTEQUALS;}| <BIG> { bop=BooleanOperation.BIG;}| <LESS> { bop=BooleanOperation.LESS;}
            | <BIGNEQ> { bop=BooleanOperation.BIGNEQ;}| <LESSNEQ>  { bop=BooleanOperation.LESSNEQ;})
     { return bop; }
}

ConstantCommand CONSTANTCOMMAND():
{
    ConstantCommand constantCommand=new ConstantCommand();
    Token constant;
    Token string=null;
    Number number;
}
{
    ( number = NUMBER() {constantCommand.setNumberValue(number); } | string = <STRING> {constantCommand.setStringValue(string.image);} | 
            string = <QUOTED_STRING> { String sv=string.image; sv=sv.substring(1,sv.length()-1); constantCommand.setStringValue(sv); } )
    { return constantCommand; }
}

TOKEN: 
{
      < STRING:  <LETTER> ( <LETTER> )*  >
    | < QUOTED_STRING: "\"" (~["\""])+ "\"" >
}

Number NUMBER():
{
    Token digitToken;
    String data;
    boolean isdouble=false;
    boolean islong=false;
}
{
    digitToken = <DIGIT> { data=digitToken.image; } (<DIGIT> { data+=digitToken.image; } )* ( <LONG> { islong = true; } | 
                ( <DOT> { data+='.'; isdouble=true; }  <DIGIT> { data+=digitToken.image; } (<DIGIT> { data+=digitToken.image; })* ) )?
     {  if(isdouble){ return Double.parseDouble(data); } else { if(islong) { return Long.parseLong(data);} else { return Integer.parseInt(data); } }  }
}

ForeachCommand FOREACHCOMMAND():
{
    ForeachCommand fcmd=new ForeachCommand();
    ArrayList<Command> innerCommands=new ArrayList<Command>();
    Command innerCommand;
    Token variablename;
    PrintVariableCommand printVariableCommand;
}
{
    <LPARAN> "$" variablename = <VARNAME> <FDELIM> printVariableCommand = PRINTVARIABLECOMMAND()  <RPARAN> <CLPARAN> (innerCommand = COMMAND() { innerCommands.add(innerCommand); } )* <CRPARAN>
    { fcmd.setVariableName(variablename.image); fcmd.setPrintVariableCommand(printVariableCommand); 
            fcmd.setInnerCommands(innerCommands);  return fcmd; }
}